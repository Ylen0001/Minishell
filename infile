
void	redirections(t_data *data, const struct s_vectint *redir_t, char **redir_f)
{
	size_t it;
	size_t hd_it;

	it = -1;
	hd_it = 0;
	while(++it < redir_t->size)
	{
		if(redir_t->redir_type[it] == STDIN_REDIR)
			stdin_redir(data, redir_t->redir_type[it], redir_f[it]);
		else if(redir_t->redir_type[it] == HERE_DOC)
			{
				heredoc_redir(data, redir_t->redir_type[it], data->hd_names[hd_it]);
				hd_it++;
			}
		else
			stdout_redir(data, redir_t->redir_type[it], redir_f[it]);
	}
}

void	stdin_redir(t_data *data, int redir_type, char *redir_file)
{
	open_file_minishell(data, redir_type, redir_file);
	if(dup2(data->a_file, STDIN_FILENO) == -1)
		perror("Dup2: STDIN REDIR failed.\n");
	close(data->a_file);
}

void	stdout_redir(t_data *data, int redir_type, char *redir_file)
{
	open_file_minishell(data, redir_type, redir_file);
	if(dup2(data->a_file, STDIN_FILENO) == -1)
		perror("Dup2: STDOUT REDIR failed.\n");
	close(data->a_file);
}

void	heredoc_redir(t_data *data, int redir_type, char *redir_file)
{
	open_file_minishell(data, redir_type, redir_file);
	if(dup2(data->a_file, STDIN_FILENO) == -1)
		perror("Dup2: HERE_DOC REDIR failed.\n");
	close(data->a_file);
}





void	redirections(t_data *data, const struct s_vectint *redir_t, char **redir_f)
{
	size_t it;
	size_t hd_it;

	it = -1;
	hd_it = 0;
	while(++it < redir_t->size)
	{
		if(redir_t->redir_type[it] == STDIN_REDIR)
		{
			open_file_minishell(data, redir_t->redir_type[it], redir_f[it]);
			if(dup2(data->a_file, STDIN_FILENO) == -1)
				perror("Dup2: STDIN REDIR failed.\n");
			close(data->a_file);
		}
		else if(redir_t->redir_type[it] == HERE_DOC)
		{
			open_file_minishell(data, redir_t->redir_type[it], data->hd_names[hd_it]);
			if(dup2(data->a_file, STDIN_FILENO) == -1)
				perror("Dup2: HERE_DOC REDIR failed.\n");
			close(data->a_file);
			hd_it++;
		}
		else
		{
			open_file_minishell(data, redir_t->redir_type[it], redir_f[it]);
			if(dup2(data->a_file, STDOUT_FILENO) == -1)
				perror("Dup2: STDOUT REDIR failed.\n");
			close(data->a_file);
		}
	}
}





echo hello world
echo bonjour
echo au revoir




hithere












#include "../includes/minishell.h"

int		flag_is_ok(char *flag)
{
	size_t i;

	i = 1;
	if(flag[0] != '-')
		return (0);
	while(flag[i])
	{
		if(flag[i] != 'n')
			return (0);
		i++;
	}
	return (1);
}

void	b_i_echo(t_data *data, char *cmd)
{
	// char 	**splited;
	char 	*splited;
	int		newline;
	size_t	i;

	newline = 1;
	splited = clean_input(data, cmd);
	if(splited == NULL)
		return ;
	// splited = ft_split(cmd, ' ');	
	i = 1;
	if(data->flag_echo_trig == 1)
		newline = 0;
	while(splited)
		printf("%s", splited);
	if (newline)
		printf("\n");
	data->exit_status = 0;
	// builtin_exit(data, "OUI");
	return;
}

char *clean_input(t_data *data, char *cmd)
{
	char *clean_input;
	size_t i;
	size_t j;

	clean_input = NULL;
	i = 0;
	j = 0;

	while(cmd[i])
	{
		if(strncmp(cmd, "echo ", 5)) // On skip echo
			i += 5;
		if(cmd[i] == '-') // Si option
			i++;
		while(cmd[i] == 'n') // Tant que n 
			i++;
		if (cmd[i] == ' ' && cmd[i] == '\t')	// On skip le last whitespace avant la str Ã  echo.
		{
			i++;
			data->flag_echo_trig = 1;
		}
		else									// Si invalid flag.
			i = 5;
		clean_input = ft_calloc((ft_strlen(cmd) - i) + 1, sizeof(char));
		while(cmd[i]) // On cpy le reste de cmd dans clean_input.
		{
			clean_input[j] = cmd[i];
			j++;
			i++; 
		}
		return (clean_input);
	}
	return (NULL);
}